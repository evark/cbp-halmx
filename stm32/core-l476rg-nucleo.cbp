<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<CodeBlocks_project_file>
	<FileVersion major="1" minor="6" />
	<Project>
		<Option title="core-l476rg-nucleo" />
		<Option pch_mode="2" />
		<Option compiler="arm-elf-gcc" />
		<Build>
			<Target title="core">
				<Option output="_build/L476RG_NUCLEO/${TARGET_NAME}" prefix_auto="1" extension_auto="1" />
				<Option working_dir="" />
				<Option object_output="_build/L476RG_NUCLEO/${TARGET_NAME}" />
				<Option type="2" />
				<Option compiler="arm-elf-gcc" />
				<ExtraCommands>
					<Add after="arm-none-eabi-size $(TARGET_OUTPUT_FILE)" />
				</ExtraCommands>
			</Target>
			<Target title="Blink1">
				<Option output="_build/L476RG_NUCLEO/${TARGET_NAME}/${TARGET_NAME}" prefix_auto="1" extension_auto="1" />
				<Option working_dir="" />
				<Option object_output="_build/L476RG_NUCLEO/${TARGET_NAME}" />
				<Option type="5" />
				<Option compiler="arm-elf-gcc" />
				<ExtraCommands>
					<Add after="arm-none-eabi-size $(TARGET_OUTPUT_FILE)" />
					<Add after="arm-none-eabi-objcopy  -O binary $(TARGET_OUTPUT_FILE) $(TARGET_OUTPUT_DIR)$(TARGET_OUTPUT_BASENAME).bin" />
				</ExtraCommands>
			</Target>
			<Target title="Blink2">
				<Option output="_build/L476RG_NUCLEO/${TARGET_NAME}/${TARGET_NAME}" prefix_auto="1" extension_auto="1" />
				<Option working_dir="" />
				<Option object_output="_build/L476RG_NUCLEO/${TARGET_NAME}" />
				<Option type="5" />
				<Option compiler="arm-elf-gcc" />
				<ExtraCommands>
					<Add after="arm-none-eabi-size $(TARGET_OUTPUT_FILE)" />
					<Add after="arm-none-eabi-objcopy  -O binary $(TARGET_OUTPUT_FILE) $(TARGET_OUTPUT_DIR)$(TARGET_OUTPUT_BASENAME).bin" />
				</ExtraCommands>
			</Target>
			<Target title="Uart1">
				<Option output="_build/L476RG_NUCLEO/${TARGET_NAME}/${TARGET_NAME}" prefix_auto="1" extension_auto="1" />
				<Option working_dir="" />
				<Option object_output="_build/L476RG_NUCLEO/${TARGET_NAME}" />
				<Option type="5" />
				<Option compiler="arm-elf-gcc" />
				<ExtraCommands>
					<Add after="arm-none-eabi-size $(TARGET_OUTPUT_FILE)" />
					<Add after="arm-none-eabi-objcopy  -O binary $(TARGET_OUTPUT_FILE) $(TARGET_OUTPUT_DIR)$(TARGET_OUTPUT_BASENAME).bin" />
				</ExtraCommands>
			</Target>
			<Target title="Digital1">
				<Option output="_build/L476RG_NUCLEO/${TARGET_NAME}/${TARGET_NAME}" prefix_auto="1" extension_auto="1" />
				<Option working_dir="" />
				<Option object_output="_build/L476RG_NUCLEO/${TARGET_NAME}" />
				<Option type="5" />
				<Option compiler="arm-elf-gcc" />
				<ExtraCommands>
					<Add after="arm-none-eabi-size $(TARGET_OUTPUT_FILE)" />
					<Add after="arm-none-eabi-objcopy  -O binary $(TARGET_OUTPUT_FILE) $(TARGET_OUTPUT_DIR)$(TARGET_OUTPUT_BASENAME).bin" />
				</ExtraCommands>
			</Target>
			<Target title="Digital2">
				<Option output="_build/L476RG_NUCLEO/${TARGET_NAME}/${TARGET_NAME}" prefix_auto="1" extension_auto="1" />
				<Option working_dir="" />
				<Option object_output="_build/L476RG_NUCLEO/${TARGET_NAME}" />
				<Option type="5" />
				<Option compiler="arm-elf-gcc" />
				<ExtraCommands>
					<Add after="arm-none-eabi-size $(TARGET_OUTPUT_FILE)" />
					<Add after="arm-none-eabi-objcopy  -O binary $(TARGET_OUTPUT_FILE) $(TARGET_OUTPUT_DIR)$(TARGET_OUTPUT_BASENAME).bin" />
				</ExtraCommands>
			</Target>
		</Build>
		<VirtualTargets>
			<Add alias="ALL" targets="core;Blink1;Blink2;Uart1;" />
		</VirtualTargets>
		<Compiler>
			<Add option="-mthumb" />
			<Add option="-Wshadow" />
			<Add option="-Wredundant-decls" />
			<Add option="-Wundef" />
			<Add option="-Wextra" />
			<Add option="-Wall" />
			<Add option="-Og" />
			<Add option="-ggdb" />
			<Add option="-std=gnu11" />
			<Add option="-nostdlib" />
			<Add option="-fno-common" />
			<Add option="-ffunction-sections" />
			<Add option="-fdata-sections" />
			<Add option="-fno-rtti" />
			<Add option="-fno-exceptions" />
			<Add option="-pipe" />
			<Add option="-mcpu=cortex-m4" />
			<Add option="-mfloat-abi=hard" />
			<Add option="-mfpu=fpv4-sp-d16" />
			<Add option="-DUSE_HAL_DRIVER" />
			<Add option="-DSTM32L476xx" />
			<Add option="-DHSE_VALUE=8000000U" />
			<Add directory="system/CMSIS/Include" />
			<Add directory="system/include" />
			<Add directory="cores/stm32hal" />
			<Add directory="system/CMSIS/STM32L4xx/Include" />
			<Add directory="system/HALMX/STM32L4xx_HAL_Driver/Inc" />
			<Add directory="variants/L476RG_NUCLEO" />
		</Compiler>
		<Linker>
			<Add option="-Wl,-Map=$(TARGET_OUTPUT_DIR)$(TARGET_OUTPUT_BASENAME).map,--cref" />
			<Add option="-Wl,--gc-sections" />
			<Add option="-mthumb" />
			<Add option="-nostartfiles" />
			<Add option="--specs=nano.specs" />
			<Add option="-Wl,--no-check-sections" />
			<Add option="-Wl,-static" />
			<Add option="-mcpu=cortex-m4" />
			<Add option="-mfloat-abi=hard" />
			<Add option="-mfpu=fpv4-sp-d16" />
			<Add option="-Tstm32l476xg.ld" />
			<Add option="-Wl,-whole-archive" />
			<Add option="_build/L476RG_NUCLEO/libcore.a" />
			<Add option="-lhal-l476xx-8m" />
			<Add option="-Wl,-no-whole-archive" />
			<Add option="-lstdc++" />
			<Add option="-lsupc++" />
			<Add option="-lm" />
			<Add option="-lgcc" />
			<Add option="-lc" />
			<Add option="-lnosys" />
			<Add directory="system/lib" />
			<Add directory="system/ld" />
		</Linker>
		<Unit filename="cores/stm32hal/Arduino.h">
			<Option target="core" />
		</Unit>
		<Unit filename="cores/stm32hal/HardwareSerial.h">
			<Option target="core" />
		</Unit>
		<Unit filename="cores/stm32hal/Print.cpp">
			<Option target="core" />
		</Unit>
		<Unit filename="cores/stm32hal/Print.h">
			<Option target="core" />
		</Unit>
		<Unit filename="cores/stm32hal/Printable.h">
			<Option target="core" />
		</Unit>
		<Unit filename="cores/stm32hal/Stream.cpp">
			<Option target="core" />
		</Unit>
		<Unit filename="cores/stm32hal/Stream.h">
			<Option target="core" />
		</Unit>
		<Unit filename="cores/stm32hal/Tone.h">
			<Option target="core" />
		</Unit>
		<Unit filename="cores/stm32hal/WCharacter.h">
			<Option target="core" />
		</Unit>
		<Unit filename="cores/stm32hal/WInterrupts.h">
			<Option target="core" />
		</Unit>
		<Unit filename="cores/stm32hal/WMath.cpp">
			<Option target="core" />
		</Unit>
		<Unit filename="cores/stm32hal/WMath.h">
			<Option target="core" />
		</Unit>
		<Unit filename="cores/stm32hal/WString.cpp">
			<Option target="core" />
		</Unit>
		<Unit filename="cores/stm32hal/WString.h">
			<Option target="core" />
		</Unit>
		<Unit filename="cores/stm32hal/WVariant.h">
			<Option target="core" />
		</Unit>
		<Unit filename="cores/stm32hal/avr/dtostrf.c">
			<Option compilerVar="CC" />
			<Option target="core" />
		</Unit>
		<Unit filename="cores/stm32hal/avr/dtostrf.h">
			<Option target="core" />
		</Unit>
		<Unit filename="cores/stm32hal/avr/interrupt.h">
			<Option target="core" />
		</Unit>
		<Unit filename="cores/stm32hal/avr/io.h">
			<Option target="core" />
		</Unit>
		<Unit filename="cores/stm32hal/avr/pgmspace.h">
			<Option target="core" />
		</Unit>
		<Unit filename="cores/stm32hal/binary.h">
			<Option target="core" />
		</Unit>
		<Unit filename="cores/stm32hal/delay.c">
			<Option compilerVar="CC" />
			<Option target="core" />
		</Unit>
		<Unit filename="cores/stm32hal/delay.h">
			<Option target="core" />
		</Unit>
		<Unit filename="cores/stm32hal/hooks.c">
			<Option compilerVar="CC" />
			<Option target="core" />
		</Unit>
		<Unit filename="cores/stm32hal/itoa.c">
			<Option compilerVar="CC" />
			<Option target="core" />
		</Unit>
		<Unit filename="cores/stm32hal/itoa.h">
			<Option target="core" />
		</Unit>
		<Unit filename="cores/stm32hal/main.cpp">
			<Option target="core" />
		</Unit>
		<Unit filename="cores/stm32hal/new.cpp">
			<Option target="core" />
		</Unit>
		<Unit filename="cores/stm32hal/pulse.h">
			<Option target="core" />
		</Unit>
		<Unit filename="cores/stm32hal/wiring.h">
			<Option target="core" />
		</Unit>
		<Unit filename="cores/stm32hal/wiring_analog.h">
			<Option target="core" />
		</Unit>
		<Unit filename="cores/stm32hal/wiring_constants.h">
			<Option target="core" />
		</Unit>
		<Unit filename="cores/stm32hal/wiring_digital.c">
			<Option compilerVar="CC" />
			<Option target="core" />
		</Unit>
		<Unit filename="cores/stm32hal/wiring_digital.h">
			<Option target="core" />
		</Unit>
		<Unit filename="cores/stm32hal/wiring_private.h">
			<Option target="core" />
		</Unit>
		<Unit filename="cores/stm32hal/wiring_shift.h">
			<Option target="core" />
		</Unit>
		<Unit filename="tests/core/Blink1.cpp">
			<Option target="Blink1" />
		</Unit>
		<Unit filename="tests/core/Blink2.cpp">
			<Option target="Blink2" />
		</Unit>
		<Unit filename="tests/core/Digital1.cpp">
			<Option target="Digital1" />
		</Unit>
		<Unit filename="tests/core/Digital2.cpp">
			<Option target="Digital2" />
		</Unit>
		<Unit filename="tests/core/Uart1.cpp">
			<Option target="Uart1" />
		</Unit>
		<Unit filename="variants/L476RG_NUCLEO/pins_arduino.h">
			<Option target="core" />
		</Unit>
		<Unit filename="variants/L476RG_NUCLEO/rcc.c">
			<Option compilerVar="CC" />
			<Option target="core" />
		</Unit>
		<Unit filename="variants/L476RG_NUCLEO/usart.c">
			<Option compilerVar="CC" />
			<Option target="core" />
		</Unit>
		<Unit filename="variants/L476RG_NUCLEO/usart.h">
			<Option target="core" />
		</Unit>
		<Unit filename="variants/L476RG_NUCLEO/variant.cpp">
			<Option target="core" />
		</Unit>
		<Unit filename="variants/L476RG_NUCLEO/variant.h">
			<Option target="core" />
		</Unit>
		<Extensions>
			<code_completion />
			<envvars />
			<lib_finder disable_auto="1" />
			<debugger>
				<remote_debugging>
					<options conn_type="0" serial_baud="115200" ip_address="localhost" ip_port="3333" additional_cmds="monitor reset init&#x0A;load _build/L476RG_NUCLEO/${TARGET_NAME}/${TARGET_NAME}" />
				</remote_debugging>
			</debugger>
		</Extensions>
	</Project>
</CodeBlocks_project_file>
